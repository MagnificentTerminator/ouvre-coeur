{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/cayor/Documents/sketches/ouvre-coeur/src/App.js\";\n\nimport React, { useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport * as meshline from \"threejs-meshline\";\nimport { extend, Canvas, useFrame, useThree, useRender } from \"react-three-fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Curves } from \"three/examples/jsm/curves/CurveExtras\";\nimport { EffectComposer } from \"three/examples/jsm//postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm//postprocessing/RenderPass\";\nimport { GlitchPass } from \"three/examples/jsm//postprocessing/GlitchPass\";\nimport \"./styles.css\"; // Pour que React three friber puisse utiliser la 3rd party threejs-meshline\n\nextend(meshline);\nextend({\n  OrbitControls: OrbitControls\n});\nextend({\n  EffectComposer: EffectComposer,\n  RenderPass: RenderPass,\n  GlitchPass: GlitchPass\n});\n/* Controls Compoent */\n\nvar Controls = function Controls() {\n  var orbitRef = useRef();\n\n  var _useThree = useThree(),\n      camera = _useThree.camera,\n      gl = _useThree.gl; // orbitRef.current.enableKeys = false\n\n\n  useFrame(function () {\n    orbitRef.current.update();\n  });\n  return /*#__PURE__*/React.createElement(\"orbitControls\", {\n    args: [camera, gl.domElement],\n    ref: orbitRef,\n    enableKeys: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  });\n};\n\nfunction Effects(_ref) {\n  var factor = _ref.factor;\n\n  var _useThree2 = useThree(),\n      gl = _useThree2.gl,\n      scene = _useThree2.scene,\n      camera = _useThree2.camera,\n      size = _useThree2.size;\n\n  var composer = useRef(); // useEffect(() => void composer.current.obj.setSize(size.width, size.height), [size]);\n\n  useRender(function () {\n    return composer.current.obj.render();\n  }, true);\n  return /*#__PURE__*/React.createElement(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"renderPass\", {\n    name: \"passes\",\n    args: [scene, camera],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"glitchPass\", {\n    name: \"passes\",\n    factor: factor,\n    renderToScreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Fatline(_ref2) {\n  var curve = _ref2.curve,\n      width = _ref2.width,\n      color = _ref2.color,\n      speed = _ref2.speed;\n  var material = useRef();\n  useFrame(function () {\n    return material.current.uniforms.dashOffset.value -= speed;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    rotation: [0, Math.random() * Math.PI, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"meshLine\", {\n    attach: \"geometry\",\n    vertices: curve,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshLineMaterial\", {\n    attach: \"material\",\n    ref: material,\n    transparent: true,\n    depthTest: false,\n    lineWidth: width,\n    color: color,\n    dashArray: 0.01,\n    dashRatio: 0.95,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar lineWidth = 0.2;\nvar count = 200;\n\nfunction Lines(_ref3) {\n  var _this2 = this;\n\n  var count = _ref3.count,\n      colors = _ref3.colors;\n  var lines = useMemo(function () {\n    return new Array(count).fill().map(function () {\n      var curve = new Curves.HeartCurve(3.5).getPoints(50);\n      return {\n        color: colors[parseInt(colors.length * Math.random())],\n        width: lineWidth,\n        speed: Math.max(0.0001, 0.0005 * Math.random()),\n        curve: curve\n      };\n    });\n  }, [colors, count]);\n  return lines.map(function (props, index) {\n    return /*#__PURE__*/React.createElement(Fatline, Object.assign({\n      key: index\n    }, props, {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 38\n      }\n    }));\n  });\n}\n\nexport default function App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Welcome to Docker\"), /*#__PURE__*/React.createElement(Canvas, {\n    className: \"canva\",\n    camera: {\n      position: [0, 0, 320],\n      fov: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Lines, {\n    count: count,\n    colors: [\"#9e91bc\", \"#4a4e7c\", \"#6f7db7\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"names":["React","useMemo","useRef","THREE","meshline","extend","Canvas","useFrame","useThree","useRender","OrbitControls","Curves","EffectComposer","RenderPass","GlitchPass","Controls","orbitRef","camera","gl","current","update","domElement","Effects","factor","scene","size","composer","obj","render","Fatline","curve","width","color","speed","material","uniforms","dashOffset","value","Math","random","PI","lineWidth","count","Lines","colors","lines","Array","fill","map","HeartCurve","getPoints","parseInt","length","max","props","index","App","position","fov"],"sources":["/home/cayor/Documents/sketches/ouvre-coeur/src/App.js"],"sourcesContent":["import React, { useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport * as meshline from \"threejs-meshline\";\nimport { extend, Canvas, useFrame, useThree, useRender } from \"react-three-fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Curves } from \"three/examples/jsm/curves/CurveExtras\";\n\nimport { EffectComposer } from \"three/examples/jsm//postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm//postprocessing/RenderPass\";\nimport { GlitchPass } from \"three/examples/jsm//postprocessing/GlitchPass\";\n\nimport \"./styles.css\";\n\n// Pour que React three friber puisse utiliser la 3rd party threejs-meshline\nextend(meshline);\nextend({ OrbitControls });\nextend({ EffectComposer, RenderPass, GlitchPass });\n\n/* Controls Compoent */\nconst Controls = () => {\n  const orbitRef = useRef();\n  const { camera, gl } = useThree();\n\n  // orbitRef.current.enableKeys = false\n  useFrame(() => {\n    orbitRef.current.update();\n  });\n  return <orbitControls args={[camera, gl.domElement]} ref={orbitRef} enableKeys={false} />;\n};\n\nfunction Effects({ factor }) {\n  const { gl, scene, camera, size } = useThree();\n  const composer = useRef();\n  // useEffect(() => void composer.current.obj.setSize(size.width, size.height), [size]);\n  useRender(() => composer.current.obj.render(), true);\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass name=\"passes\" args={[scene, camera]} />\n      <glitchPass name=\"passes\" factor={factor} renderToScreen />\n    </effectComposer>\n  );\n}\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef();\n\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed));\n\n  return (\n    <mesh rotation={[0, Math.random() * Math.PI, 0]}>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={width}\n        color={color}\n        dashArray={0.01}\n        dashRatio={0.95}\n      />\n    </mesh>\n  );\n}\n\nconst lineWidth = 0.2;\nconst count = 200;\n\nfunction Lines({ count, colors }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map(() => {\n        const curve = new Curves.HeartCurve(3.5).getPoints(50);\n\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: lineWidth,\n          speed: Math.max(0.0001, 0.0005 * Math.random()),\n          curve,\n        };\n      }),\n    [colors, count]\n  );\n  return lines.map((props, index) => <Fatline key={index} {...props} />);\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Welcome to Docker</h1>\n      <Canvas className=\"canva\" camera={{ position: [0, 0, 320], fov: 25 }}>\n        <Controls />\n        <Lines count={count} colors={[\"#9e91bc\", \"#4a4e7c\", \"#6f7db7\"]} />\n      </Canvas>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}