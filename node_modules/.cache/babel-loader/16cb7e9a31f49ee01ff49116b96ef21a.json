{"ast":null,"code":"/**\n * A bunch of parametric curves\n * @author zz85\n *\n * Formulas collected from various sources\n * http://mathworld.wolfram.com/HeartCurve.html\n * http://mathdl.maa.org/images/upload_library/23/stemkoski/knots/page6.html\n * http://en.wikipedia.org/wiki/Viviani%27s_curve\n * http://mathdl.maa.org/images/upload_library/23/stemkoski/knots/page4.html\n * http://www.mi.sanu.ac.rs/vismath/taylorapril2011/Taylor.pdf\n * https://prideout.net/blog/old/blog/index.html@p=44.html\n */\nimport { Curve, Vector3 } from \"../../../build/three.module.js\";\n\nvar Curves = function () {\n  // GrannyKnot\n  function GrannyKnot() {\n    Curve.call(this);\n  }\n\n  GrannyKnot.prototype = Object.create(Curve.prototype);\n  GrannyKnot.prototype.constructor = GrannyKnot;\n\n  GrannyKnot.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t = 2 * Math.PI * t;\n    var x = -0.22 * Math.cos(t) - 1.28 * Math.sin(t) - 0.44 * Math.cos(3 * t) - 0.78 * Math.sin(3 * t);\n    var y = -0.1 * Math.cos(2 * t) - 0.27 * Math.sin(2 * t) + 0.38 * Math.cos(4 * t) + 0.46 * Math.sin(4 * t);\n    var z = 0.7 * Math.cos(3 * t) - 0.4 * Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(20);\n  }; // HeartCurve\n\n\n  function HeartCurve(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 5 : scale;\n  }\n\n  HeartCurve.prototype = Object.create(Curve.prototype);\n  HeartCurve.prototype.constructor = HeartCurve;\n\n  HeartCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t *= 2 * Math.PI;\n    var x = 16 * Math.pow(Math.sin(t), 3);\n    var y = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t);\n    var z = 0;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // Viviani's Curve\n\n\n  function VivianiCurve(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 70 : scale;\n  }\n\n  VivianiCurve.prototype = Object.create(Curve.prototype);\n  VivianiCurve.prototype.constructor = VivianiCurve;\n\n  VivianiCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t = t * 4 * Math.PI; // normalized to 0..1\n\n    var a = this.scale / 2;\n    var x = a * (1 + Math.cos(t));\n    var y = a * Math.sin(t);\n    var z = 2 * a * Math.sin(t / 2);\n    return point.set(x, y, z);\n  }; // KnotCurve\n\n\n  function KnotCurve() {\n    Curve.call(this);\n  }\n\n  KnotCurve.prototype = Object.create(Curve.prototype);\n  KnotCurve.prototype.constructor = KnotCurve;\n\n  KnotCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t *= 2 * Math.PI;\n    var R = 10;\n    var s = 50;\n    var x = s * Math.sin(t);\n    var y = Math.cos(t) * (R + s * Math.cos(t));\n    var z = Math.sin(t) * (R + s * Math.cos(t));\n    return point.set(x, y, z);\n  }; // HelixCurve\n\n\n  function HelixCurve() {\n    Curve.call(this);\n  }\n\n  HelixCurve.prototype = Object.create(Curve.prototype);\n  HelixCurve.prototype.constructor = HelixCurve;\n\n  HelixCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var a = 30; // radius\n\n    var b = 150; // height\n\n    var t2 = 2 * Math.PI * t * b / 30;\n    var x = Math.cos(t2) * a;\n    var y = Math.sin(t2) * a;\n    var z = b * t;\n    return point.set(x, y, z);\n  }; // TrefoilKnot\n\n\n  function TrefoilKnot(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  TrefoilKnot.prototype = Object.create(Curve.prototype);\n  TrefoilKnot.prototype.constructor = TrefoilKnot;\n\n  TrefoilKnot.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t *= Math.PI * 2;\n    var x = (2 + Math.cos(3 * t)) * Math.cos(2 * t);\n    var y = (2 + Math.cos(3 * t)) * Math.sin(2 * t);\n    var z = Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // TorusKnot\n\n\n  function TorusKnot(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  TorusKnot.prototype = Object.create(Curve.prototype);\n  TorusKnot.prototype.constructor = TorusKnot;\n\n  TorusKnot.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var p = 3;\n    var q = 4;\n    t *= Math.PI * 2;\n    var x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    var y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    var z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // CinquefoilKnot\n\n\n  function CinquefoilKnot(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  CinquefoilKnot.prototype = Object.create(Curve.prototype);\n  CinquefoilKnot.prototype.constructor = CinquefoilKnot;\n\n  CinquefoilKnot.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var p = 2;\n    var q = 5;\n    t *= Math.PI * 2;\n    var x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    var y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    var z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // TrefoilPolynomialKnot\n\n\n  function TrefoilPolynomialKnot(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 10 : scale;\n  }\n\n  TrefoilPolynomialKnot.prototype = Object.create(Curve.prototype);\n  TrefoilPolynomialKnot.prototype.constructor = TrefoilPolynomialKnot;\n\n  TrefoilPolynomialKnot.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t = t * 4 - 2;\n    var x = Math.pow(t, 3) - 3 * t;\n    var y = Math.pow(t, 4) - 4 * t * t;\n    var z = 1 / 5 * Math.pow(t, 5) - 2 * t;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  };\n\n  var scaleTo = function scaleTo(x, y, t) {\n    var r = y - x;\n    return t * r + x;\n  }; // FigureEightPolynomialKnot\n\n\n  function FigureEightPolynomialKnot(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 1 : scale;\n  }\n\n  FigureEightPolynomialKnot.prototype = Object.create(Curve.prototype);\n  FigureEightPolynomialKnot.prototype.constructor = FigureEightPolynomialKnot;\n\n  FigureEightPolynomialKnot.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t = scaleTo(-4, 4, t);\n    var x = 2 / 5 * t * (t * t - 7) * (t * t - 10);\n    var y = Math.pow(t, 4) - 13 * t * t;\n    var z = 1 / 10 * t * (t * t - 4) * (t * t - 9) * (t * t - 12);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // DecoratedTorusKnot4a\n\n\n  function DecoratedTorusKnot4a(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  DecoratedTorusKnot4a.prototype = Object.create(Curve.prototype);\n  DecoratedTorusKnot4a.prototype.constructor = DecoratedTorusKnot4a;\n\n  DecoratedTorusKnot4a.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    t *= Math.PI * 2;\n    var x = Math.cos(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    var y = Math.sin(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    var z = 0.35 * Math.sin(5 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // DecoratedTorusKnot4b\n\n\n  function DecoratedTorusKnot4b(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  DecoratedTorusKnot4b.prototype = Object.create(Curve.prototype);\n  DecoratedTorusKnot4b.prototype.constructor = DecoratedTorusKnot4b;\n\n  DecoratedTorusKnot4b.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var fi = t * Math.PI * 2;\n    var x = Math.cos(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    var y = Math.sin(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    var z = 0.2 * Math.sin(9 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // DecoratedTorusKnot5a\n\n\n  function DecoratedTorusKnot5a(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  DecoratedTorusKnot5a.prototype = Object.create(Curve.prototype);\n  DecoratedTorusKnot5a.prototype.constructor = DecoratedTorusKnot5a;\n\n  DecoratedTorusKnot5a.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var fi = t * Math.PI * 2;\n    var x = Math.cos(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    var y = Math.sin(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    var z = 0.2 * Math.sin(20 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }; // DecoratedTorusKnot5c\n\n\n  function DecoratedTorusKnot5c(scale) {\n    Curve.call(this);\n    this.scale = scale === undefined ? 40 : scale;\n  }\n\n  DecoratedTorusKnot5c.prototype = Object.create(Curve.prototype);\n  DecoratedTorusKnot5c.prototype.constructor = DecoratedTorusKnot5c;\n\n  DecoratedTorusKnot5c.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var fi = t * Math.PI * 2;\n    var x = Math.cos(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    var y = Math.sin(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    var z = 0.35 * Math.sin(15 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  };\n\n  return {\n    GrannyKnot: GrannyKnot,\n    HeartCurve: HeartCurve,\n    VivianiCurve: VivianiCurve,\n    KnotCurve: KnotCurve,\n    HelixCurve: HelixCurve,\n    TrefoilKnot: TrefoilKnot,\n    TorusKnot: TorusKnot,\n    CinquefoilKnot: CinquefoilKnot,\n    TrefoilPolynomialKnot: TrefoilPolynomialKnot,\n    FigureEightPolynomialKnot: FigureEightPolynomialKnot,\n    DecoratedTorusKnot4a: DecoratedTorusKnot4a,\n    DecoratedTorusKnot4b: DecoratedTorusKnot4b,\n    DecoratedTorusKnot5a: DecoratedTorusKnot5a,\n    DecoratedTorusKnot5c: DecoratedTorusKnot5c\n  };\n}();\n\nexport { Curves };","map":null,"metadata":{},"sourceType":"module"}